// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel InitializeParticles

// 32-bit Morton code encoding function (adapted from 64-bit Swift/Metal version)
uint EncodeMorton3D(float3 pos)
{
    // Convert to uint32 and mask to 10 bits per axis (0x3FF = 1023 = 2^10-1)
    uint x = (uint)pos.x & 0x3FF;
    uint y = (uint)pos.y & 0x3FF;
    uint z = (uint)pos.z & 0x3FF;
    
    uint result = 0;
    
    // Interleave bits for 32-bit Morton code (10 bits per axis = 30 bits total)
    for (int i = 0; i < 10; i++) {
        result |= ((x & (1U << i)) << (2 * i));
        result |= ((y & (1U << i)) << (2 * i + 1));
        result |= ((z & (1U << i)) << (2 * i + 2));
    }
    
    return result;
}

// Particle struct definition
struct Particle
{
    float3 position;    // 3-component position vector
    float3 velocity;    // 3-component velocity vector
    uint layer;         // Layer units
    uint mortonCode;    // Morton code for spatial indexing
};

// Buffer definitions
RWStructuredBuffer<Particle> particlesBuffer;
RWStructuredBuffer<uint> mortonCodesBuffer;  // Separate morton codes buffer
RWStructuredBuffer<uint> particleIndicesBuffer;  // Separate indices buffer
RWStructuredBuffer<uint> nodeFlagsBuffer; // Packed: 00(unique)(active)

// Parameters for particle initialization (pre-calculated on CPU)
float3 fluidInitialBoundsMin;
float3 fluidInitialBoundsMax;
float3 simulationBoundsMin;
float3 simulationBoundsMax;
float3 mortonNormalizationFactor;
float mortonMaxValue;

// Grid parameters for even particle distribution
uint3 gridDimensions;
float3 gridSpacing;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// Total number of particles to initialize
uint count;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}

[numthreads(64,1,1)]
void InitializeParticles (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= count) return;
    
    // Initialize particle with zero values
    Particle particle;
    particle.velocity = float3(0.0, 0.0, 0.0);
    particle.layer = 0;
    
    // Calculate grid position using morton code major order (Z, Y, X)
    // This ensures particles are distributed evenly throughout the volume
    uint gridZ = index / (gridDimensions.x * gridDimensions.y);
    uint remaining = index % (gridDimensions.x * gridDimensions.y);
    uint gridY = remaining / gridDimensions.x;
    uint gridX = remaining % gridDimensions.x;
    
    // Clamp grid position to valid range
    gridX = min(gridX, (uint)gridDimensions.x - 1);
    gridY = min(gridY, (uint)gridDimensions.y - 1);
    gridZ = min(gridZ, (uint)gridDimensions.z - 1);
    
    // Reverse X axis to make particles initially unsorted
    gridX = (uint)gridDimensions.x - 1 - gridX;
    
    // Convert grid position to world position
    // Use grid spacing to position particles evenly within the bounds
    float3 gridOffset = float3(gridX, gridY, gridZ) * gridSpacing;
    particle.position = fluidInitialBoundsMin + gridOffset;
    
    // Normalize position to morton code range using pre-calculated factors
    float3 normalizedPos = (particle.position - simulationBoundsMin) * mortonNormalizationFactor;
    
    // Clamp to valid range using pre-calculated max value
    normalizedPos = clamp(normalizedPos, 0.0, mortonMaxValue);
    
    // Generate morton code from normalized position
    particle.mortonCode = EncodeMorton3D(normalizedPos);
    
    // Write particle to buffer
    particlesBuffer[index] = particle;
    
    // Write morton code and index to separate buffers
    mortonCodesBuffer[index] = particle.mortonCode;
    particleIndicesBuffer[index] = index;
    
    // Initialize node flags buffer (packed: 00(unique)(active))
    // Both active and unique are false (0), so packed value is 0
    nodeFlagsBuffer[index] = 0;
}

