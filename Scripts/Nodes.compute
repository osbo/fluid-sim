#pragma kernel CreateLeaves
#pragma kernel ProcessLeaves
#pragma kernel ProcessNodes

struct faceVelocities
{
    float left;
    float right;
    float bottom;
    float top;
    float front;
    float back;
};

// Particle struct (must match C# struct)
struct Particle
{
    float3 position;    // 12 bytes
    faceVelocities velocities;    // 24 bytes
    uint layer;         // 4 bytes
    uint mortonCode;    // 4 bytes
};

// Node struct (must match C# struct)
struct Node
{
    float3 position;    // 12 bytes
    faceVelocities velocities;    // 24 bytes
    uint layer;         // 4 bytes
    uint mortonCode;    // 4 bytes
};

// Input buffers
RWStructuredBuffer<Particle> particlesBuffer;           // input: all particles
RWStructuredBuffer<uint> sortedMortonCodes;             // input: sorted morton codes
RWStructuredBuffer<uint> sortedParticleIndices;         // input: sorted particle indices
RWStructuredBuffer<uint> uniqueIndices;                 // input: indices of first occurrence of each unique code
RWStructuredBuffer<uint> activeIndices;                 // input: indices of first occurrence of each active code
RWStructuredBuffer<uint> uniqueCount;                   // input: number of unique codes
RWStructuredBuffer<uint> activeCount;                   // input: number of active codes
// Output buffers
RWStructuredBuffer<Node> nodesBuffer;                   // output: aggregated nodes
RWStructuredBuffer<uint> nodeMortonCodes;               // output: morton codes for nodes
RWStructuredBuffer<uint> nodeIndices;                   // output: indices for nodes (0, 1, 2, ...)
RWStructuredBuffer<uint> nodeFlagsBuffer;               // output: initialized to 00 (packed flags)

uint numUniqueActiveNodes;                              // number of unique morton codes
uint numActiveNodes;                                    // number of active nodes
uint numNodes;                                          // number of nodes
uint numParticles;                                      // total number of particles
uint layer;                                             // current hierarchical layer

[numthreads(512, 1, 1)]
void CreateLeaves(uint3 id : SV_DispatchThreadID)
{
    uint threadIndex = id.x;
    if (threadIndex >= numNodes) return;
    
    // Get the index into sorted arrays for this unique morton code
    uint sortedArrayIndex = uniqueIndices[threadIndex];
    
    // Find how many particles share this morton code
    uint nextUniqueIndex = threadIndex + 1 < numNodes ? uniqueIndices[threadIndex + 1] : numParticles;
    
    // Aggregate particle data with weighted average
    float3 weightedPosition = float3(0, 0, 0);
    faceVelocities weightedVelocity;
    weightedVelocity.left = 0.0;
    weightedVelocity.right = 0.0;
    weightedVelocity.bottom = 0.0;
    weightedVelocity.top = 0.0;
    weightedVelocity.front = 0.0;
    weightedVelocity.back = 0.0;
    float totalWeight = 0.0;
    uint minLayer = 11;
    
    // Process all particles with this morton code
    for (uint i = sortedArrayIndex; i < nextUniqueIndex; i++)
    {
        uint particleIndex = sortedParticleIndices[i];
        Particle particle = particlesBuffer[particleIndex];
        
        // Weight = 8^(particle.layer), but since layer is always 0, weight = 8^0 = 1
        float weight = pow(8.0, (float)particle.layer);
        
        weightedPosition += particle.position * weight;
        weightedVelocity.left += particle.velocities.left * weight;
        weightedVelocity.right += particle.velocities.right * weight;
        weightedVelocity.bottom += particle.velocities.bottom * weight;
        weightedVelocity.top += particle.velocities.top * weight;
        weightedVelocity.front += particle.velocities.front * weight;
        weightedVelocity.back += particle.velocities.back * weight;
        totalWeight += weight;
        
        // Track minimum layer
        minLayer = min(minLayer, particle.layer);
    }
    
    // Normalize by total weight (center of mass)
    // Safety check: prevent division by zero
    if (totalWeight > 0.0) {
        weightedPosition /= totalWeight;
        weightedVelocity.left /= totalWeight;
        weightedVelocity.right /= totalWeight;
        weightedVelocity.bottom /= totalWeight;
        weightedVelocity.top /= totalWeight;
        weightedVelocity.front /= totalWeight;
        weightedVelocity.back /= totalWeight;
    }

    uint mortonCode = particlesBuffer[sortedParticleIndices[sortedArrayIndex]].mortonCode;
    
    // Create the node
    Node node;
    node.position = weightedPosition;
    node.velocities = weightedVelocity;
    node.layer = minLayer;  // Use the minimum layer found
    node.mortonCode = mortonCode;
    
    // Write outputs
    nodesBuffer[threadIndex] = node;
    nodeMortonCodes[threadIndex] = mortonCode;
    nodeIndices[threadIndex] = threadIndex;  // Simple 0, 1, 2, ... sequence
    nodeFlagsBuffer[threadIndex] = 1;      // Initialize to 01
}

[numthreads(512, 1, 1)]
void ProcessLeaves(uint3 id : SV_DispatchThreadID)
{
    uint threadIndex = id.x;
    if (threadIndex >= numUniqueActiveNodes) return;

    uint sortedArrayIndex = uniqueIndices[threadIndex];
    uint nextUniqueIndex = threadIndex + 1 < numUniqueActiveNodes ? uniqueIndices[threadIndex + 1] : numNodes;
    uint numNodesInGroup = nextUniqueIndex - sortedArrayIndex;

    if (numNodesInGroup == 0) return;

    bool coarsen = true;
    for (uint i = sortedArrayIndex; i < nextUniqueIndex; i++)
    {
        Node node = nodesBuffer[i];
        if (node.layer <= layer) {
            coarsen = false;
            break;
        }
    }

    if (coarsen)
    {
        float3 weightedPosition = float3(0, 0, 0);
        faceVelocities weightedVelocity;
        weightedVelocity.left = 0.0;
        weightedVelocity.right = 0.0;
        weightedVelocity.bottom = 0.0;
        weightedVelocity.top = 0.0;
        weightedVelocity.front = 0.0;
        weightedVelocity.back = 0.0;
        float totalWeight = 0.0;
        uint minLayer = 11;

        for (uint i = sortedArrayIndex; i < nextUniqueIndex; i++)
        {
            Node node = nodesBuffer[i];
            weightedPosition += node.position * pow(8.0, (float)node.layer);
            float weight = pow(8.0, (float)node.layer);
            weightedVelocity.left += node.velocities.left * weight;
            weightedVelocity.right += node.velocities.right * weight;
            weightedVelocity.bottom += node.velocities.bottom * weight;
            weightedVelocity.top += node.velocities.top * weight;
            weightedVelocity.front += node.velocities.front * weight;
            weightedVelocity.back += node.velocities.back * weight;
            totalWeight += pow(8.0, (float)node.layer);
            minLayer = min(minLayer, node.layer);
        }
        
        // Safety check: prevent division by zero
        if (totalWeight > 0.0) {
            weightedPosition /= totalWeight;
            weightedVelocity.left /= totalWeight;
            weightedVelocity.right /= totalWeight;
            weightedVelocity.bottom /= totalWeight;
            weightedVelocity.top /= totalWeight;
            weightedVelocity.front /= totalWeight;
            weightedVelocity.back /= totalWeight;
        }

        Node aggregatedNode;
        aggregatedNode.position = weightedPosition;
        aggregatedNode.velocities = weightedVelocity;
        aggregatedNode.layer = minLayer;
        aggregatedNode.mortonCode = nodesBuffer[sortedArrayIndex].mortonCode;

        nodesBuffer[sortedArrayIndex] = aggregatedNode;

        for (uint i = 1; i < numNodesInGroup; i++)
        {
            nodeFlagsBuffer[sortedArrayIndex + i] = 0;
        }
    } else {
        for (uint i = sortedArrayIndex; i < nextUniqueIndex; i++)
        {
            Node node = nodesBuffer[i];
            if (node.layer > layer) {
                node.layer = layer - 1;
            }
        }
    }
}

[numthreads(512, 1, 1)]
void ProcessNodes(uint3 id : SV_DispatchThreadID)
{
    uint threadIndex = id.x;
    if (threadIndex >= numUniqueActiveNodes) return;

    uint uniqueActiveIndex = uniqueIndices[threadIndex];
    uint nextUniqueActiveIndex = threadIndex + 1 < numUniqueActiveNodes ? uniqueIndices[threadIndex + 1] : numActiveNodes;
    uint numNodesInGroup = nextUniqueActiveIndex - uniqueActiveIndex;

    if (numNodesInGroup == 0) return;

    bool coarsen = true;
    for (uint i = uniqueActiveIndex; i < nextUniqueActiveIndex; i++)
    {
        Node node = nodesBuffer[activeIndices[i]];
        if (node.layer <= layer) {
            coarsen = false;
            break;
        }
    }

    if (coarsen)
    {
        float3 weightedPosition = float3(0, 0, 0);
        faceVelocities weightedVelocity;
        weightedVelocity.left = 0.0;
        weightedVelocity.right = 0.0;
        weightedVelocity.bottom = 0.0;
        weightedVelocity.top = 0.0;
        weightedVelocity.front = 0.0;
        weightedVelocity.back = 0.0;
        float totalWeight = 0.0;
        uint minLayer = 11;

        for (uint i = uniqueActiveIndex; i < nextUniqueActiveIndex; i++)
        {
            Node node = nodesBuffer[activeIndices[i]];
            weightedPosition += node.position * pow(8.0, (float)node.layer);
            float weight = pow(8.0, (float)node.layer);
            weightedVelocity.left += node.velocities.left * weight;
            weightedVelocity.right += node.velocities.right * weight;
            weightedVelocity.bottom += node.velocities.bottom * weight;
            weightedVelocity.top += node.velocities.top * weight;
            weightedVelocity.front += node.velocities.front * weight;
            weightedVelocity.back += node.velocities.back * weight;
            totalWeight += pow(8.0, (float)node.layer);
            minLayer = min(minLayer, node.layer);
        }

        // Safety check: prevent division by zero
        if (totalWeight > 0.0) {
            weightedPosition /= totalWeight;
            weightedVelocity.left /= totalWeight;
            weightedVelocity.right /= totalWeight;
            weightedVelocity.bottom /= totalWeight;
            weightedVelocity.top /= totalWeight;
            weightedVelocity.front /= totalWeight;
            weightedVelocity.back /= totalWeight;
        }

        Node aggregatedNode;
        aggregatedNode.position = weightedPosition;
        aggregatedNode.velocities = weightedVelocity;
        aggregatedNode.layer = minLayer;
        aggregatedNode.mortonCode = nodesBuffer[activeIndices[uniqueActiveIndex]].mortonCode;

        nodesBuffer[activeIndices[uniqueActiveIndex]] = aggregatedNode;

        for (uint i = 1; i < numNodesInGroup; i++)
        {
            nodeFlagsBuffer[activeIndices[uniqueActiveIndex + i]] = 0;
        }
    } else {
        for (uint i = uniqueActiveIndex; i < nextUniqueActiveIndex; i++)
        {
            Node node = nodesBuffer[activeIndices[i]];
            if (node.layer > layer) {
                nodesBuffer[activeIndices[i]].layer = layer - 1;
            }
        }
    }
}